// import matrix from './matrix.js'


const population = 10
const shape = [ 10, 11, 2 ]
const relu = x => x < 0 ? 0.1 * x : x


// neural net layout:
//
// input layer       hideen layer with ReLU      output layer with step function, thresh=0.5
// [ sprite1 x ]     [ hidden 00 ]               [ jump ]
// [ sprite1 y ]     [ hidden 01 ]               [ duck ]
// [ sprite2 x ]     [ hidden 02 ]
// [ sprite2 y ]     [ hidden 03 ]
// [ sprite3 x ]     [ hidden 04 ]
// [ sprite3 y ]     [ hidden 05 ]
// [ spirte4 x ]     [ hidden 06 ]
// [ sprite4 y ]     [ hidden 07 ]
// [ sprite5 x ]     [ hidden 08 ]
// [ spritr5 y ]     [ hidden 09 ]
//                   [ hidden 10 ]


/*

some decent models:

(10, 11, 2)
weights = [[[-0.8126785993251193,0.21153611014405493,-0.8833037595974091,0.7123931188380492,-0.41227707361851973,-0.8748711346952018,0.36483096103009816,-0.875608517458446,0.4755378044245062,0.05621604994002638,-0.40578115741943455],[-0.5237863140291825,-0.48127002770236427,-0.2541610878880851,0.7713148590715839,0.302263047069677,0.8861796161091964,-0.4280445287762591,-0.19653108854324142,0.5134394004333229,0.5268145539395612,-0.9562468460663318],[-0.19273170676048368,-0.24816608154997954,0.5901891709212839,0.027404345771630645,0.2551661564689427,0.3348745516544729,-0.7163140343192715,-0.3155300979922804,0.9582275240260998,0.18744855632213042,0.7555934320484559],[0.024205673777161874,-0.5409733416192681,-0.9996891675319435,0.4616154449664638,0.08122758704825639,-0.7288505846863154,-0.2947847968152111,0.8495069931300705,0.6942924094839968,-0.0643176402432255,-0.6971810964443983],[0.1963176207152988,-0.325378438706899,0.010308576895986299,0.18803913807625516,0.9455778303412963,0.22888755456739407,0.08236692734618423,-0.02046455940692926,-0.901646379857211,-0.03905104569304596,0.6409720532751275],[-0.877622926020555,-0.6423506882044991,-0.8204025732688369,0.49267328177497083,-0.4330280112327154,0.17838272571736713,-0.7459139835473825,-0.004237941329285899,0.415305117932268,-0.09104043429678343,0.9244657076377845],[0.5105355413009911,0.22203366029992866,0.8428782735204834,0.6876124586392875,0.8427755460171547,-0.3556510493158118,0.0016718447896528765,-0.31612574516625047,-0.09828027633147984,0.3829533065661934,0.7518558821889374],[0.5521201114888026,-0.9644860903621817,-0.21509727244950927,0.004525155209174958,0.07681117692649764,0.36362472902670806,-0.23142879712698639,0.019998146588039667,0.811691767573198,-0.27915591636559034,0.8739143204772271],[0.8795741228870164,-0.12081302725455023,-0.826427475448059,0.1277402562174279,0.3076243708425519,0.9982699835623312,0.9802266712042487,0.2797583653018729,-0.32803892278043056,0.6811969606087853,0.590248892777288],[-0.24454176793045335,0.3762719883467276,-0.2581633194945754,0.22880255019206697,-0.21925243705460318,-0.24775180319835766,0.8588199450602532,0.35547807825941335,-0.30938623096276263,-0.1578715758628042,0.18311110591781032]],[[0.39001567413840466,-0.32504285781473197],[0.8716886119072416,0.09851246086990306],[-0.32263583900703896,-0.6100754926202567],[0.7175571289919755,-0.09964523365754463],[0.9910038320789529,-0.8456023650762972],[0.9487633895299892,-0.4625428482203069],[-0.5363315279707495,-0.06680416234005548],[0.49941133314531694,-0.6014902632578814],[-0.41262464993013914,0.5459529737007216],[0.9759985079402789,-0.7722842356539075],[0.24206840917814088,0.9139388717099104]]]

(10, 5, 5, 2)
[[[0.7384207139835195,0.8085226735870275,-0.2948215778524723,0.8310530999490129,-0.5286904458799193],[0.2952462320932674,-0.9561620689736383,-0.244336186969627,-0.3960966687539784,0.8119921182312546],[0.4534604704577494,-0.5001787225494403,-0.9106384380696251,-0.43892945036660835,-0.0013513085922647328],[-0.007164412091923644,0.8580384078185159,0.9716421203902827,0.5224968971881814,-0.5051262360941555],[0.5959752071130291,-0.31700309693081064,0.12221242906705498,-0.9121184759168486,-0.14368726964678924],[-0.2534822885290384,-0.8255476613915258,0.5849880010113084,-0.6759998893388004,0.6728721165306304],[0.7474692174767532,0.45141808713986675,-0.6400296013209377,0.9934450173274847,0.35171115048433554],[0.7385083554934515,0.0829944546425434,0.07794949215502056,-0.10511173128174933,-0.9886300619495922],[-0.9919031979869426,0.9043593292582668,-0.015839920190625634,0.029594911216888065,-0.42752606471325816],[0.326599213532786,-0.7764666116995866,0.6360693911278665,0.8429653999052347,-0.904314228611816]],[[-0.677547262401414,0.3130949860574552,0.1929288151622215,-0.6970233708654598,-0.5344401543216559],[-0.6054753817761331,-0.893285270545908,-0.28199472633202394,-0.010525188494346693,-0.35933340410049963],[-0.5825593231387987,-0.9789508824528403,-0.7332188878391546,-0.43912353425363326,-0.2009296383151309],[-0.6736024630422612,-0.3009237123582107,0.5168692344625061,0.6062968585501753,0.38536065712331924],[0.4890226743306143,0.7836839961999384,0.1741339681816867,0.08524989422782303,-0.8523106442153221]],[[-0.561032145988539,0.7385525595148552],[0.7709245719784374,-0.9528617317047616],[-0.691728409554178,-0.9319991676256754],[0.4980670362767663,0.13809398454626853],[-0.6702043969596554,0.4536578669595528]]]

(10, 5, 5, 2)
[[[0.09173301758933272,-0.6687754156692685,0.5456272103445667,0.9092200061555804,0.20669261716354415],[-0.9444250082284698,0.38709120163379973,-0.7537887905977709,0.3633775716173493,0.12140685184174771],[0.5516354810189208,-0.5942522334005109,-0.14208874791795667,-0.8902348725118205,-0.7224246856225283],[0.6245655738550107,-0.9282791862787221,0.04423767650612653,-0.5338333331285661,-0.1607208648349956],[0.6970383021926474,-0.0692065307463543,-0.6913348346763457,-0.0582086665859185,0.16737169994498347],[-0.4710660741380326,0.323406815286877,-0.06862721042779407,-0.11716063383636799,0.5016097482417323],[0.5004874330333933,-0.12628330296607837,0.08464363688755583,0.46871456410298906,-0.12759128352532034],[0.2706540738631822,0.9379957217007098,-0.7524487328660796,0.32571871397763097,-0.47191930792685577],[-0.2928736948727666,-0.8838994281565218,-0.927605065417398,0.8295044728635972,0.8145566090610568],[-0.7097848521148014,-0.42791303183776597,0.8193961428412329,0.8098259628310984,0.2591199114805427]],[[0.8147818285808892,-0.22818513618081449,-0.6154430548431673,0.7711214286093719,0.30445300550870513],[-0.6253959129119364,0.8234094087325792,0.17712195240144624,0.6659974259739121,0.9640497499543055],[-0.5674927001567056,-0.23648484282912774,-0.4859161161182306,-0.37717093544936375,0.8135442494801177],[0.8700326166854557,0.718992437676198,-0.3027039970250427,0.8018480277595623,0.6045580976660463],[-0.08719769205167038,-0.9099748859254935,-0.686284460634186,0.5110041823159266,-0.3033571984683108]],[[-0.33501105256043173,0.4959043742128637],[0.7538280581159986,-0.8241924554885096],[0.19426522974562666,0.009693160073160012],[-0.0930825639884918,-0.09984146983923026],[-0.9473230824090941,-0.39782065844895387]]]

(10,2)
[[[-0.19928142443824104,-0.15186338909301478],[0.7435266579038209,0.13933781017055225],[0.5868605430011331,0.4675824354144118],[-0.45636815827309496,-0.07751213727014017],[-0.1797122103215818,0.023188259558081903],[-0.29255755196968236,-0.5915024464942795],[-0.6737624937420983,0.9643258814632292],[-0.4155686866582031,0.39620280553657805],[-0.34941490437540157,-0.11943231404221999],[0.17881171878052227,-0.31280167248288926]]]
*/


function matrix(r, c) {
  return Array(r).fill(0).map(() => Array(c).fill(0).map(() => 2 * Math.random() - 1))
}


const dot = (a, b) =>
  a.map((row, i) =>
    b[0].map((_, j) =>
      row.reduce((acc, _, n) => acc + a[i][n] * b[n][j], 0)
    )
  )


class ann {

  constructor(game) {
    this.game = game

    game.hooks.onFrame = this.onFrame.bind(this)
    game.hooks.onGameOver = this.onGameOver.bind(this)
    game.hooks.onGameStart = this.onGameStart.bind(this)

    // evolution state

    this.gen = 0 // current generation
    this.fitness = 0 // highest recorded score
    this.pool = [] // gene pool

  }

  // create the input vector

  look() {
    let sprites = [...this.game.state.cacti, ...this.game.state.birds]
    let input = Array(shape[0]).fill(0)

    sprites.forEach(({ x, y }, i) => {
      input[2*i] = x / this.game.canvas.width
      input[2*i + 1] = y / this.game.canvas.height
    })

    return [input]
  }


  // feed forward

  forward() {
    let output = this.look()
    this.weights.forEach(w => output = relu(dot(output, w)))

    // apply a step function to the output

    return [output[0].map(y => ~~(y >= 0.5))]
  }


  onFrame() {
    let output = this.forward()[0]

    output[0] && this.game.onInput('jump')
    output[1] && this.game.onInput('duck')
  }


  onGameStart() {
    this.weights = [[[-0.8126785993251193,0.21153611014405493,-0.8833037595974091,0.7123931188380492,-0.41227707361851973,-0.8748711346952018,0.36483096103009816,-0.875608517458446,0.4755378044245062,0.05621604994002638,-0.40578115741943455],[-0.5237863140291825,-0.48127002770236427,-0.2541610878880851,0.7713148590715839,0.302263047069677,0.8861796161091964,-0.4280445287762591,-0.19653108854324142,0.5134394004333229,0.5268145539395612,-0.9562468460663318],[-0.19273170676048368,-0.24816608154997954,0.5901891709212839,0.027404345771630645,0.2551661564689427,0.3348745516544729,-0.7163140343192715,-0.3155300979922804,0.9582275240260998,0.18744855632213042,0.7555934320484559],[0.024205673777161874,-0.5409733416192681,-0.9996891675319435,0.4616154449664638,0.08122758704825639,-0.7288505846863154,-0.2947847968152111,0.8495069931300705,0.6942924094839968,-0.0643176402432255,-0.6971810964443983],[0.1963176207152988,-0.325378438706899,0.010308576895986299,0.18803913807625516,0.9455778303412963,0.22888755456739407,0.08236692734618423,-0.02046455940692926,-0.901646379857211,-0.03905104569304596,0.6409720532751275],[-0.877622926020555,-0.6423506882044991,-0.8204025732688369,0.49267328177497083,-0.4330280112327154,0.17838272571736713,-0.7459139835473825,-0.004237941329285899,0.415305117932268,-0.09104043429678343,0.9244657076377845],[0.5105355413009911,0.22203366029992866,0.8428782735204834,0.6876124586392875,0.8427755460171547,-0.3556510493158118,0.0016718447896528765,-0.31612574516625047,-0.09828027633147984,0.3829533065661934,0.7518558821889374],[0.5521201114888026,-0.9644860903621817,-0.21509727244950927,0.004525155209174958,0.07681117692649764,0.36362472902670806,-0.23142879712698639,0.019998146588039667,0.811691767573198,-0.27915591636559034,0.8739143204772271],[0.8795741228870164,-0.12081302725455023,-0.826427475448059,0.1277402562174279,0.3076243708425519,0.9982699835623312,0.9802266712042487,0.2797583653018729,-0.32803892278043056,0.6811969606087853,0.590248892777288],[-0.24454176793045335,0.3762719883467276,-0.2581633194945754,0.22880255019206697,-0.21925243705460318,-0.24775180319835766,0.8588199450602532,0.35547807825941335,-0.30938623096276263,-0.1578715758628042,0.18311110591781032]],[[0.39001567413840466,-0.32504285781473197],[0.8716886119072416,0.09851246086990306],[-0.32263583900703896,-0.6100754926202567],[0.7175571289919755,-0.09964523365754463],[0.9910038320789529,-0.8456023650762972],[0.9487633895299892,-0.4625428482203069],[-0.5363315279707495,-0.06680416234005548],[0.49941133314531694,-0.6014902632578814],[-0.41262464993013914,0.5459529737007216],[0.9759985079402789,-0.7722842356539075],[0.24206840917814088,0.9139388717099104]]]//shape.slice(0, -1).map((n, i) => matrix(n, shape[i + 1]))
  }


  onGameOver() {
    this.game.resetGame()
  }
}


// class baseline {
//   constructor(game) {
//     this.game = game
//     this.game.hooks.onFrame = this.onFrame.bind(this)
//   }
//
//   onFrame() {
//     let sprites = [...this.game.state.cacti, ...this.game.state.birds]
//     this.game.onInput('duck')
//
//     sprites.forEach(sprite => {
//       if (sprite.x < (200 + this.game.state.level*3) && sprite.y < 200) {
//         this.game.onInput('jump')
//       }
//     })
//   }
// }

export default ann
